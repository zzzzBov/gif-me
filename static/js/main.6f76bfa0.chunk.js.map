{"version":3,"sources":["components/Footer.tsx","hooks/useGiphy.ts","hooks/useQueryString.ts","components/Result.tsx","components/Results.tsx","components/SearchField.tsx","components/Search.tsx","index.tsx","components/GifMe.tsx","key.ts"],"names":["Footer","react_default","a","createElement","className","initialized","qs","querystring","parse","window","location","search","slice","Result","_ref","onClick","imgProps","Object","objectWithoutProperties","type","assign","alt","Results","results","map","result","Result_Result","key","id","SearchField","label","name","onChange","value","autoFocus","_onChange","_x","apply","this","arguments","toString","e","currentTarget","Search","onSubmit","method","_onSubmit","preventDefault","SearchField_SearchField","aria-hidden","ReactDOM","render","_useQueryString","initialValue","_useState","useState","_useState2","slicedToArray","setValue","useEffect","newQS","stringify","objectSpread","defineProperty","history","replaceState","concat","useQueryString","_useQueryString2","_useGiphy","q","data","setData","searchGiphy","useCallback","asyncToGenerator","regenerator_default","mark","_callee","response","newData","wrap","_context","prev","next","api_key","limit","fetch","sent","ok","Error","json","gif","_gif$images","images","_gif$images$fixed_hei","fixed_height","height","src","url","width","originalUrl","original","title","navigator","clipboard","writeText","t0","stop","useGiphy","_useGiphy2","document","Search_Search","Results_Results","Footer_Footer","querySelector"],"mappings":"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","file":"static/js/main.6f76bfa0.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Footer: React.FunctionComponent = () => (\n  <footer className='Footer'>\n    <p className='Footer_copyright'>Copyright &copy; zzzzBov</p>\n  </footer>\n)\n","import querystring from 'querystring'\n\nimport { useCallback, useState } from 'react'\n\nimport { IResultProps } from '../components'\nimport { IGIF, ISearchResponse } from '../interfaces'\nimport { API_KEY } from '../key'\n\nlet initialized = false\n\nexport const useGiphy = (q: string): [IResultProps[], () => void] => {\n  const [data, setData] = useState<IResultProps[]>([])\n\n  const searchGiphy = useCallback(\n    async () => {\n      const qs = {\n        api_key: API_KEY,\n        limit: 30,\n        q\n      }\n\n      const search = querystring.stringify(qs)\n\n      try {\n        const response = await fetch(`https://api.giphy.com/v1/gifs/search?${search}`)\n\n        if (!response.ok) {\n          throw new Error('bad response')\n        }\n\n        const results = await response.json() as ISearchResponse\n\n        const newData = results.data.map((gif: IGIF) => {\n          const {\n            id,\n            images: {\n              fixed_height: {\n                height,\n                url: src,\n                width\n              },\n              original: {\n                url: originalUrl\n              }\n            },\n            title: alt\n          } = gif\n\n          return {\n            alt,\n            height,\n            id,\n            onClick () {\n              navigator.clipboard.writeText(originalUrl)\n            },\n            src,\n            width\n          }\n        })\n\n        setData(newData)\n      } catch (e) {\n        setData([])\n      }\n    },\n    [q]\n  )\n\n  if (!initialized) {\n    searchGiphy()\n    initialized = true\n  }\n\n  return [\n    data,\n    searchGiphy\n  ]\n}\n","import { useEffect, useState } from 'react'\nimport querystring from 'querystring'\n\nconst qs = querystring.parse(window.location.search.slice(1))\n\nexport const useQueryString = (key: string): [string, React.Dispatch<React.SetStateAction<string>>] => {\n  let initialValue = qs[key] || ''\n  if (typeof initialValue !== 'string') {\n    initialValue = initialValue.slice(-1)[0]\n  }\n  \n  const [value, setValue] = useState(initialValue)\n\n  useEffect(() => {\n    const newQS = querystring.stringify({\n      ...qs,\n      [key]: value\n    })\n\n    window.history.replaceState(null, '', `?${newQS}`)\n  }, [key, value])\n\n  return [value, setValue]\n}\n","import React from 'react';\n\nexport interface IResultProps {\n  alt: string\n  height: string\n  id: string\n  onClick(): void\n  src: string\n  width: string\n}\n\nexport const Result: React.FunctionComponent<IResultProps> = ({\n  onClick,\n  ...imgProps\n}) => (\n  <button type='button' className='Result' onClick={onClick}>\n    <img className='Result_image' alt=\"\" {...imgProps} />\n  </button>\n)\n","import React from 'react'\n\nimport { IResultProps, Result } from './Result'\n\nexport interface IResultsProps {\n  results: IResultProps[]\n}\n\nexport const Results: React.FunctionComponent<IResultsProps> = ({\n  results\n}) => (\n  <main className='Results'>\n    {results.map((result) => (\n      <Result key={result.id} {...result} />\n    ))}\n  </main>\n)\n","import React from 'react'\n\nexport interface ISearchFieldProps {\n  label: string\n  name: string\n  onChange(value: string): void\n  value: string\n}\n\nexport const SearchField: React.FunctionComponent<ISearchFieldProps> = ({\n  label,\n  name,\n  onChange,\n  value\n}) => (\n  <label className='SearchField'>\n    <span className='SearchField_label'>{label}</span>\n    <input\n      autoFocus={true}\n      className='SearchField_input'\n      name={name}\n      onChange={(e) => onChange(e.currentTarget.value)}\n      type='search'\n      value={value} />\n  </label>\n)\n","import React from 'react'\n\nimport { SearchField } from './SearchField'\n\nexport interface ISearchProps {\n  onChange(value: string): void,\n  onSubmit(): void,\n  value: string\n}\n\nexport const Search: React.FunctionComponent<ISearchProps> = ({\n  onChange,\n  onSubmit,\n  value\n}) => (\n  <header className='Search'>\n    <form\n      className='Search_form'\n      method='GET'\n      onSubmit={(e) => {\n        e.preventDefault()\n        onSubmit()\n      }}>\n      <SearchField\n        label='Gif Me'\n        name='q'\n        onChange={onChange}\n        value={value} />\n      <button\n        className='Search_button'\n        type='submit'>\n        <i className='fa fa-search' aria-hidden='true'></i>\n        <span className='sr-only'>Search</span>\n      </button>\n    </form>\n  </header>\n)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport { GifMe } from './components'\n\nReactDOM.render(\n  <GifMe />,\n  document.querySelector('.Root')\n)\n","import React, { useEffect } from 'react'\n\nimport { useGiphy, useQueryString } from '../hooks'\n\nimport { Footer } from './Footer'\nimport { Results } from './Results'\nimport { Search } from './Search'\n\nexport const GifMe: React.FunctionComponent = () => {\n  const [value, setValue] = useQueryString('q')\n\n  const [results, search] = useGiphy(value)\n\n  useEffect(() => {\n    document.title = `Gif Me ${value}`\n  }, [value])\n\n  return (\n    <div className=\"GifMe\">\n      <Search\n        onChange={setValue}\n        onSubmit={search}\n        value={value}/>\n      <Results\n        results={results} />\n      <Footer />\n    </div>\n  )\n}\n","export const API_KEY = 'gIOlBEOuNaMXTmlVKnaIos6clb9St8U3'\n"],"sourceRoot":""}